const { td, dd, format_date } = require('./dates.js');

const fields = [
  { name: 'check_to', nice: 'Mail check to', value: '',
    multi: 'mail_check_to_lines', multi_nice: 'Mail Check Address Lines',
    help: 'Enter each line of the name and mailing address a payor should use to remit mailed payments. When an invoice is created, "Mail check to" lines updated and recalled when a new invoice is created.',
  },
  { name: 'venmo_to', nice: 'Venmo to', value: '',
    help: 'Enter each the Venmo user id a payor should us to remit payment.',
  },
  { name: 'paypal_to', nice: 'Paypal to', value: '',
    help: 'Enter each the Paypal user id a payor should us to remit payment.',
  },
  { name: 'zelle_to', nice: 'Zelle to',  value: '',
    help: 'Enter each the Zelle user id a payor should us to remit payment.',
  },
  { name: 'date', nice: 'Invoice date',  value: format_date(td),
    help: 'This field is editable. However, the invoice date is typically the date it is generated (today).',
  },
  { name: 'due_date', nice: 'Payment due date',  value: format_date(dd),
    help: 'Edit the due date if desired. This is date the invoice is to be paid by. If you edit this date, the system will remember the interval and set the due date for you on future invoices accordingly.',
  },
  { name: 'invoice_number', nice: 'Invoice number',  value: '',
    help: 'Incremental invoice numbers are auto generated if left empty. It is recommended to leave this empty; however, any text can be entered thus supporting custom, invoice numbering requirements.',
  },
  { name: 'po_number', nice: 'P.O. number',  value: '',
    help: '"Pay Order" numbers are sometimes given by payors and required for invoicing. Any text string can be entered. This is often left blank.',
  },
  { name: 'bill_to', nice: 'Client address',  value: '',
    multi: 'bil_to_lines', multi_nice: 'Bill To Address Lines',
    help: 'Include the name or company of the payor on the first line, "Add Bill To Address Lines" for street address, city-state-zip, and phone number as desired.',
  },
  { name: 'item', nice: 'Item to bill',  value: '',
    multi: 'items', multi_nice: 'Invoice Item Group (Shift click to duplicate)',
    help: '"Item to bill" is typically short, like a biling code, and it may be left empty as long as "Billing detail" is completed. A common billing code for services rendered is "HOURLY".',
  },
  { name: 'description', nice: 'Billing detail',  value: '',
    multi: 'items', size: 'large',
    help: '"Billing detail" is typically longer, like a sentence explaining work completed. It may be left empty as long as "Item to bill" is also not left empty.',
  },
  { name: 'quantity', nice: 'Quantity to bill',  value: '',
    multi: 'items', size: 'small',
    help: 'When items for sale, this will likely be an integer number representing the number of items to bill. If "Item to bill" is "HOURLY" the "Quanity to bill" might include decimals to represent quarter (0.25) or half hours (eg 3.5 to represent three-and-a-half hours)',
  },
  { name: 'rate', nice: 'Billing rate',  value: '',
    multi: 'items',
    help: '"Billing rate" for HOURLY biling is the hourly rate. For physical items, the "Billing rate" would be the cost of a single "Item to bill". The sub-total and total of the invoice is generated by multiplying "Quantity to bill" and "Billing rate".',
  },
];

const label = (that, vrbl, lbl) => {
  if (! that || that == '') global[vrbl] = false;
  const out = (global[vrbl]) ? '<i>'+lbl+' to:</i><br>' : '';
  global[vrbl] = false;
  return out;
}

const functions = {
  label_check_to: function() {
    return label(this, 'label__check_to___once', 'Mail checks');
  },
  label_venmo_to: function() {
    return label(this, 'label__venmo_to___once', 'Venmo');
  },
  label_paypal_to: function() {
    return label(this, 'label__paypal_to___once', 'Paypal');
  },
  label_zelle_to: function() {
    return label(this, 'label__zelle_to___once', 'Zelle');
  },
  reset_labels: function() {
    global.label__check_to___once = true;
    global.label__venmo_to___once = true;
    global.label__paypal_to___once = true;
    global.label__zelle_to___once = true;
  }
}
functions.reset_labels();

module.exports = { fields, functions };
